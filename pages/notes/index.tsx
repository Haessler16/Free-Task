import { NextPage } from 'next'
import Head from 'next/head'

import { useMemo, useState } from 'react'
import {
  Box,
  Text,
  Grid,
  useMediaQuery,
  Spinner,
  Center,
  useConst,
} from '@chakra-ui/react'

import { getSession, GetSessionParams, useSession } from 'next-auth/react'
import { MainLayout } from 'layouts/main'

// COMPONENTS
import { FormToNotes } from 'components/Notes/Form'
import { AddButton } from 'components/AddButton'
import { NotesHeader } from 'components/Notes/Header'
import { NotesList } from 'components/Notes/List'

// INTERFACES
import { iUser } from 'utils/interfaces/user'
import { iNote } from 'utils/interfaces/notes'
import { iFolder } from 'utils/interfaces/folder'

// HOOKS
import { useGetNotes } from 'hooks/useGetNotes'
import { useGetFolders } from 'hooks/useGetFolders'

import prisma from 'lib/prisma'

interface iNotesProps {
  notes: iNote[]
  folders: iFolder[]
}

export async function getServerSideProps(
  context: GetSessionParams | undefined,
) {
  const session = await getSession(context)

  if (!session) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }
  }
  const user = session.user as iUser

  const notes = await prisma.notes.findMany({
    where: {
      userId: user.id,
    },
  })

  const folders = await prisma.folder.findMany({
    where: {
      userId: user.id,
    },
  })

  return {
    props: {
      notes: JSON.parse(JSON.stringify(notes)),
      folders: JSON.parse(JSON.stringify(folders)),
    },
  }
}

const Notes: NextPage<iNotesProps> = ({ notes, folders }) => {
  const [showForm, setShowForm] = useState(false)
  const [folderSelected, setFolderSelected] = useState<number | null>(0)

  const [isLessThan800] = useMediaQuery('(max-width: 760px)', {
    ssr: true,
    fallback: false, // return false on the server, and re-evaluate on the client side
  })

  //GET DATA
  const { notesData, isLoading, error, session } = useGetNotes({
    fallback: notes,
    folderId: folderSelected,
  })
  const { foldersData } = useGetFolders({ fallback: folders })

  const user = useMemo(() => session?.user as iUser, [session?.user])

  const addNotesForm = () => {
    setShowForm(true)
  }

  if (isLoading || !session) {
    return (
      <Center h='100vh'>
        <Spinner
          thickness='4px'
          speed='0.65s'
          emptyColor='gray.200'
          color='blue.500'
          size='xl'
        />
      </Center>
    )
  }

  if (!notesData) {
    return <h1>No data</h1>
  }

  return (
    <MainLayout>
      <Head>
        <title>Notes</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/asignacion.png' />
      </Head>

      <main>
        {!showForm ? (
          <Box px={5}>
            <NotesHeader
              isLessThan800={isLessThan800}
              addNotesForm={addNotesForm}
              folderSelected={folderSelected}
              setFolderSelected={setFolderSelected}
              folders={foldersData}
            />

            {notesData.length > 0 ? (
              <Grid
                id='characters_grid'
                templateColumns='repeat(auto-fit, minmax(min(100%, 22rem), 1fr))'
                gap={2}>
                {notesData.map((note) => {
                  return (
                    <NotesList
                      key={note.id}
                      note={note}
                      userId={user.id}
                      folderId={folderSelected}
                      userRole={user.role}
                    />
                  )
                })}
              </Grid>
            ) : (
              <Text textAlign='center' fontSize='lg'>
                No Notes, try to create a new one.
              </Text>
            )}

            {isLessThan800 && <AddButton handleAdd={addNotesForm} />}
          </Box>
        ) : (
          <FormToNotes
            setShowForm={setShowForm}
            user={user}
            folders={foldersData}
          />
        )}
      </main>
    </MainLayout>
  )
}

export default Notes
