import { NextPage } from 'next'
import Head from 'next/head'

import { getSession, GetSessionParams } from 'next-auth/react'

import {
  Box,
  Button,
  Center,
  Grid,
  Spinner,
  Text,
  useMediaQuery,
} from '@chakra-ui/react'
import { AddIcon } from '@chakra-ui/icons'

import { MainLayout } from 'layouts/main'
import { AddButton } from 'components/AddButton'

import { useGetTasks } from 'hooks/useGetTasks'

import { iUser } from 'utils/interfaces/user'
import { iTask } from 'utils/interfaces/task'

import { TaskList } from 'components/Tasks/List'
import { useState } from 'react'
import prisma from 'lib/prisma'
import { FormToTask } from 'components/Tasks/Form'

export async function getServerSideProps(
  context: GetSessionParams | undefined,
) {
  const session = await getSession(context)

  if (!session) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }
  }

  const user = session.user as iUser

  const tasks = await prisma.task.findMany({
    where: {
      userId: user.id,
    },
  })

  return {
    props: {
      tasks: JSON.parse(JSON.stringify(tasks)),
    },
  }
}

const Task: NextPage<{ tasks: iTask[] }> = ({ tasks }) => {
  const [showForm, setShowForm] = useState(false)

  const { tasksData, isLoading, session } = useGetTasks({ fallback: tasks })

  const [isLessThan800] = useMediaQuery('(max-width: 760px)', {
    ssr: true,
    fallback: false, // return false on the server, and re-evaluate on the client side
  })

  const addTasksForm = () => {
    setShowForm(true)
  }

  if (isLoading || !session) {
    return (
      <Center h='100vh'>
        <Spinner
          thickness='4px'
          speed='0.65s'
          emptyColor='gray.200'
          color='blue.500'
          size='xl'
        />
      </Center>
    )
  }

  if (!tasksData) {
    return <h1>No data</h1>
  }

  console.log({ tasks, tasksData })

  return (
    <MainLayout>
      <Head>
        <title>Task</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/asignacion.png' />
      </Head>

      <main>
        {!showForm ? (
          <Box px={5}>
            <Button
              mb='3'
              variant='blue'
              color='white'
              fontSize='lg'
              rightIcon={<AddIcon />}
              onClick={addTasksForm}>
              Create
            </Button>

            {tasksData.length > 0 ? (
              <Grid
                id='characters_grid'
                templateColumns='repeat(auto-fit, minmax(min(100%, 22rem), 1fr))'
                gap={2}>
                {tasksData.map((task) => {
                  return (
                    <TaskList
                      key={task.id}
                      task={task}
                      userId={(session?.user as iUser).id}
                    />
                  )
                })}
              </Grid>
            ) : (
              <Text textAlign='center' fontSize='lg'>
                No Tasks, try to create a new one.
              </Text>
            )}

            {isLessThan800 && <AddButton handleAdd={addTasksForm} />}
          </Box>
        ) : (
          <FormToTask setShowForm={setShowForm} user={session?.user as iUser} />
        )}
      </main>
    </MainLayout>
  )
}

export default Task
