import { useMemo } from 'react'

import { GetServerSidePropsContext, NextPage } from 'next'
import Head from 'next/head'
import NextLink from 'next/link'

import { getSession, useSession } from 'next-auth/react'

import {
  Card,
  Center,
  Editable,
  EditableInput,
  EditablePreview,
  EditableTextarea,
  Button,
  CardBody,
  Flex,
  Text,
  Divider,
  CardFooter,
  Spinner,
} from '@chakra-ui/react'

import { iTask } from 'utils/interfaces/task'
import prisma from 'lib/prisma'
import { iUser } from 'utils/interfaces/user'
import { MainLayout } from 'layouts/main'
import { ArrowBackIcon } from '@chakra-ui/icons'
import { DeleteButton } from 'components/common/Button/Delete'
import { EditableControls } from 'components/common/EditableControls'

interface iTaskProps {
  task: iTask | undefined
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getSession(context)
  const {
    query: { id },
  } = context

  if (!session) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }
  }

  const task = await prisma.task.findUnique({
    where: {
      id: id ? Number(id) : undefined,
    },
  })

  return {
    props: {
      task: JSON.parse(JSON.stringify(task)),
    },
  }
}

const Task: NextPage<iTaskProps> = ({ task }) => {
  const { data: session, status } = useSession()
  const user = useMemo(() => session?.user as iUser, [session?.user])

  const handleSubmit = async (e: {
    preventDefault: () => void
    target: any
  }) => {
    e.preventDefault()

    const title = e.target.title.value

    console.log({ title })
  }

  if (!session) {
    return (
      <Center h='100vh'>
        <Spinner
          thickness='4px'
          speed='0.65s'
          emptyColor='gray.200'
          color='blue.500'
          size='xl'
        />
      </Center>
    )
  }

  if (!task) {
    return <h1>No data</h1>
  }

  return (
    <MainLayout>
      <Head>
        <title>Task</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/asignacion.png' />
      </Head>

      <main style={{ padding: '0px 1.25rem' }}>
        <Flex justifyContent='space-between' alignItems='center'>
          <Button
            title='go back'
            as={NextLink}
            href='/tasks'
            bg='orange.300'
            _hover={{ background: 'orange.500' }}
            leftIcon={<ArrowBackIcon />}>
            Go back
          </Button>

          {user.role === 'admin' && (
            <DeleteButton
              title='Task'
              id={task.id}
              deleteUrl='/api/tasks'
              userId={user.id}
            />
          )}
        </Flex>

        <Center h='calc(100vh - 200px)'>
          <Card px='6' pb='6' w='clamp(270px,50%,440px)'>
            <form onSubmit={handleSubmit}>
              <CardBody>
                <Editable
                  defaultValue={task.title}
                  display='flex'
                  justifyContent='space-between'
                  alignItems='center'
                  gap='14px'
                  fontSize='5xl'>
                  <EditablePreview />
                  <EditableInput name='title' />
                  {user.role !== 'read' && <EditableControls />}
                </Editable>

                <Divider />

                <Flex h='30px' gap='5px' align='center' ml='10px'>
                  <Text fontSize='sm' as='u'>
                    {new Intl.DateTimeFormat('es-VE').format(
                      new Date(task.createdAt),
                    )}
                  </Text>
                </Flex>
              </CardBody>

              {user.role !== 'read' && (
                <CardFooter justify='center' p={2}>
                  <Button type='submit' variant='blue'>
                    Done
                  </Button>
                </CardFooter>
              )}
            </form>
          </Card>
        </Center>
      </main>
    </MainLayout>
  )
}

export default Task
