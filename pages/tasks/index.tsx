import { useState } from 'react'
import { NextPage } from 'next'
import Head from 'next/head'

import { getSession, GetSessionParams } from 'next-auth/react'

import {
  Button,
  Center,
  Divider,
  Spinner,
  Text,
  useMediaQuery,
  VStack,
} from '@chakra-ui/react'
import { AddIcon } from '@chakra-ui/icons'

import { MainLayout } from 'layouts/main'
import { TaskList } from 'components/Tasks/List'
import { FormToTask } from 'components/Tasks/Form'
import { AddButton } from 'components/AddButton'

import { useGetTasks } from 'hooks/useGetTasks'

import { iUser } from 'utils/interfaces/user'
import { iTask } from 'utils/interfaces/task'

import prisma from 'lib/prisma'

export async function getServerSideProps(
  context: GetSessionParams | undefined,
) {
  const session = await getSession(context)

  if (!session) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }
  }

  const user = session.user as iUser

  const tasks = await prisma.task.findMany({
    where: {
      userId: user.id,
    },
  })

  return {
    props: {
      tasksInit: JSON.parse(JSON.stringify(tasks)),
    },
  }
}

const Task: NextPage<{ tasksInit: iTask[] }> = ({ tasksInit }) => {
  const [showForm, setShowForm] = useState(false)

  const { tasksData, isLoading, session } = useGetTasks({ fallback: tasksInit })

  const [isLessThan800] = useMediaQuery('(max-width: 760px)', {
    ssr: true,
    fallback: false, // return false on the server, and re-evaluate on the client side
  })

  const addTasksForm = () => {
    setShowForm(true)
  }

  if (isLoading || !session) {
    return (
      <Center h='100vh'>
        <Spinner
          thickness='4px'
          speed='0.65s'
          emptyColor='gray.200'
          color='blue.500'
          size='xl'
        />
      </Center>
    )
  }

  if (!tasksData) {
    return <h1>No data</h1>
  }

  console.log({ tasksData })

  return (
    <MainLayout>
      <Head>
        <title>Tasks</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/asignacion.png' />
      </Head>

      <main>
        {!showForm ? (
          <>
            <Button
              mb='3'
              ml='5'
              variant='blue'
              color='white'
              fontSize='lg'
              rightIcon={<AddIcon />}
              onClick={addTasksForm}>
              Create
            </Button>

            {tasksData.length > 0 ? (
              <Center flexDir='column' gap='15px'>
                <VStack spacing={4} align='stretch' w='clamp(40%, 300px,88% )'>
                  {tasksData
                    .filter(({ done }) => done === false)
                    .map((task) => {
                      return (
                        <TaskList
                          key={task.id}
                          task={task}
                          userId={(session?.user as iUser).id}
                        />
                      )
                    })}
                </VStack>

                {tasksData.some(({ done }) => done === true) && <Divider />}

                <VStack spacing={4} align='stretch' w='clamp(40%, 300px,88% )'>
                  {tasksData
                    .filter(({ done }) => done === true)
                    .map((task) => {
                      return (
                        <TaskList
                          key={task.id}
                          task={task}
                          userId={(session?.user as iUser).id}
                          done={true}
                        />
                      )
                    })}
                </VStack>
              </Center>
            ) : (
              <Text textAlign='center' fontSize='lg'>
                No Tasks, try to create a new one.
              </Text>
            )}

            {isLessThan800 && <AddButton handleAdd={addTasksForm} />}
          </>
        ) : (
          <FormToTask setShowForm={setShowForm} user={session?.user as iUser} />
        )}
      </main>
    </MainLayout>
  )
}

export default Task
